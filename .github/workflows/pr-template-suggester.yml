name: PR Template Handler
on:
  pull_request:
    types: [opened]

jobs:
  apply-template:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Excute update-markdown script
        run: |
          chmod +x ./scripts/update-markdown.sh
          ./scripts/update-markdown.sh

      - name: Apply PR Template
        uses: actions/github-script@v6
        with:
          script: |
            let isChangeFile = false;
            const fs = require('fs');
            const path = require('path');
            const { base, head } = context.payload.pull_request;

            function replaceTextInMarkdown(filePath, searchText, replaceText) {
              try {
                // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
                const content = fs.readFileSync(filePath, "utf8");

                // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                const updatedContent = content.replace(
                  new RegExp(searchText, "g"),
                  replaceText
                );
                const replacedFileName = filePath.replace('.md', `_temp.md`);

                // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏±‡∏ö
                fs.writeFileSync(replacedFileName, updatedContent, "utf8");

                console.log("‚úÖ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                return replacedFileName;
              } catch (error) {
                console.error("üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
                return null;
              }
            }

            if (head.ref.startsWith('releases/') && base.ref === 'main') {
              templateFile = '.github/PULL_REQUEST_TEMPLATE/release_to_master.md';
              templateMessage = 'üöÄ Release PR template automatically applied!';
            } else if (head.ref.startsWith('hotfix/') && base.ref === 'main') {
              templateFile = '.github/PULL_REQUEST_TEMPLATE/hotfix_to_master.md';
              templateMessage = 'üî• Hotfix PR template automatically applied!';

            } else if (head.ref.startsWith('releases/') && base.ref === 'dev') {

              isChangeFile = true;
              templateFile = '.github/PULL_REQUEST_TEMPLATE/merge_down_to_develop.md';
              templateMessage = 'üéÅ Merge Down After Release with template automatically applied!!';

            } else if (base.ref === 'dev') {
              templateFile = '.github/PULL_REQUEST_TEMPLATE/feature_to_develop.md';
              templateMessage = '‚ú® Feature PR template automatically applied!';
            }  else {
              console.log('No matching branch pattern found for PR template');
              return;
            }

            try {
              // Check if template file exists
              if (!fs.existsSync(templateFile)) {
                console.log(`Template file does not exist: ${templateFile}`);
                return;
              }

              # Replace text in the template file
              
              
              // Read the template content
              const templateContent = fs.readFileSync(templateFile, 'utf8');

              const finalContent = templateContent.replace(/{{RELEASE_VERSION}}/g, head.ref.replace('releases/', ''))
                .replace(/{{FROM}}/g, base.ref);
              
              // Update the PR description with the template content
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: isChangeFile ? finalContent : templateContent
              });
              
              // Add a comment to notify the user
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: templateMessage
              });
              
              console.log(`Applied PR template: ${templateFile}`);
            } catch (error) {
              console.error(`Error applying PR template: ${error}`);
            }
